// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: internal/delivery/grpc/results_grpc/results.proto

package results_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResultsService_FetchById_FullMethodName  = "/results.ResultsService/FetchById"
	ResultsService_DeleteById_FullMethodName = "/results.ResultsService/DeleteById"
	ResultsService_Update_FullMethodName     = "/results.ResultsService/Update"
	ResultsService_Create_FullMethodName     = "/results.ResultsService/Create"
)

// ResultsServiceClient is the client API for ResultsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultsServiceClient interface {
	FetchById(ctx context.Context, in *IdResultRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	DeleteById(ctx context.Context, in *IdResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Create(ctx context.Context, in *ResultCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type resultsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResultsServiceClient(cc grpc.ClientConnInterface) ResultsServiceClient {
	return &resultsServiceClient{cc}
}

func (c *resultsServiceClient) FetchById(ctx context.Context, in *IdResultRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, ResultsService_FetchById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) DeleteById(ctx context.Context, in *IdResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResultsService_DeleteById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) Update(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResultsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsServiceClient) Create(ctx context.Context, in *ResultCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResultsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResultsServiceServer is the server API for ResultsService service.
// All implementations must embed UnimplementedResultsServiceServer
// for forward compatibility.
type ResultsServiceServer interface {
	FetchById(context.Context, *IdResultRequest) (*ResultResponse, error)
	DeleteById(context.Context, *IdResultRequest) (*emptypb.Empty, error)
	Update(context.Context, *ResultRequest) (*emptypb.Empty, error)
	Create(context.Context, *ResultCreateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedResultsServiceServer()
}

// UnimplementedResultsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResultsServiceServer struct{}

func (UnimplementedResultsServiceServer) FetchById(context.Context, *IdResultRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchById not implemented")
}
func (UnimplementedResultsServiceServer) DeleteById(context.Context, *IdResultRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedResultsServiceServer) Update(context.Context, *ResultRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResultsServiceServer) Create(context.Context, *ResultCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResultsServiceServer) mustEmbedUnimplementedResultsServiceServer() {}
func (UnimplementedResultsServiceServer) testEmbeddedByValue()                        {}

// UnsafeResultsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultsServiceServer will
// result in compilation errors.
type UnsafeResultsServiceServer interface {
	mustEmbedUnimplementedResultsServiceServer()
}

func RegisterResultsServiceServer(s grpc.ServiceRegistrar, srv ResultsServiceServer) {
	// If the following call pancis, it indicates UnimplementedResultsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResultsService_ServiceDesc, srv)
}

func _ResultsService_FetchById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).FetchById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultsService_FetchById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).FetchById(ctx, req.(*IdResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultsService_DeleteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).DeleteById(ctx, req.(*IdResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).Update(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServiceServer).Create(ctx, req.(*ResultCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResultsService_ServiceDesc is the grpc.ServiceDesc for ResultsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "results.ResultsService",
	HandlerType: (*ResultsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchById",
			Handler:    _ResultsService_FetchById_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _ResultsService_DeleteById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResultsService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ResultsService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/delivery/grpc/results_grpc/results.proto",
}
